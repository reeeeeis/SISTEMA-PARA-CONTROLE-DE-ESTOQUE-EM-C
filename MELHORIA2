#include <stdio.h>
#include <string.h>

struct Produto {
    int id;
    char nome[50];
    int quantidade;
    float preco;
};

struct Produto *estoque = NULL;  
int total_produtos = 0;
int capacidade = 0;              


void cabecalho_menu() {
    printf("========================================\n");
    printf("         CONTROLE DE ESTOQUE            \n");
    printf("========================================\n\n");
}

void encerrar_programa() {
    printf("\n========================================\n");
    printf("            FIM DO PROGRAMA            \n");
    printf("========================================\n\n");
}

void adicionar_produto() {
    if (total_produtos == capacidade) {
        capacidade = (capacidade == 0) ? 1 : capacidade * 2;
        struct Produto *temp = realloc(estoque, capacidade * sizeof(struct Produto));
        if (temp == NULL) {
            printf("Erro ao alocar memória.\n");
            return;
        }
        estoque = temp;
    }

    printf("Digite o nome do produto: ");
    scanf(" %[^\n]", estoque[total_produtos].nome);
    printf("Digite a quantidade: ");
    scanf("%d", &estoque[total_produtos].quantidade);
    printf("Digite o preco: ");
    scanf("%f", &estoque[total_produtos].preco);

    estoque[total_produtos].id = total_produtos + 1;
    total_produtos++;
    printf("Produto adicionado com sucesso!\n\n");
}

void listar_produtos(struct Produto **estoque, int total_produtos) {
    if (total_produtos == 0) {
        printf("Estoque vazio.\n");
        return;
    }

    printf("\n%-5s | %-30s | %-10s | %-10s\n", "ID", "Nome", "Quantidade", "Preco");
    printf("---------------------------------------------------------------\n");

    for (int i = 0; i < total_produtos; i++) {
        printf("%-5d | %-30s | %-10d | R$ %-8.2f\n",
               estoque[i]->id,
               estoque[i]->nome,
               estoque[i]->quantidade,
               estoque[i]->preco);
    }

    printf("---------------------------------------------------------------\n\n");
}

void atualizar_quantidade() {
    int id, nova_quantidade;
    printf("Digite o ID do produto: ");
    scanf("%d", &id);

    if (id < 1 || id > total_produtos) {
        printf("Produto não encontrado.\n");
    } else {
        printf("Digite a nova quantidade para o produto %s: ", estoque[id - 1].nome);
        scanf("%d", &nova_quantidade);
        estoque[id - 1].quantidade = nova_quantidade;
        printf("Quantidade atualizada com sucesso!\n\n");
    }
}

int buscaBinariaPorId(struct Produto *estoque_arr, int total_produtos_count, int id_busca) {
    int esquerda = 0;
    int direita = total_produtos_count - 1;

    while (esquerda <= direita) {
        int meio = esquerda + (direita - esquerda) / 2;

        if (estoque_arr[meio].id == id_busca) {
            return meio; 
        }

        if (estoque_arr[meio].id < id_busca) {
            esquerda = meio + 1;
        } else {
            direita = meio - 1;
        }
    }
    return -1; 
}

void buscar_produto() {
    int id_busca;
    printf("Digite o ID do produto: ");
    scanf("%d", &id_busca);

    int indice_encontrado = buscaBinariaPorId(estoque, total_produtos, id_busca);

    if (indice_encontrado != -1) {
        printf("ID: %d | Nome: %s | Quantidade: %d | Preço: %.2f\n",
               estoque[indice_encontrado].id,
               estoque[indice_encontrado].nome,
               estoque[indice_encontrado].quantidade,
               estoque[indice_encontrado].preco);
    } else {
        printf("Produto não encontrado.\n");
    }
}


void valor_total_estoque() {
    float total = 0;
    for (int i = 0; i < total_produtos; i++) {
        total += estoque[i].quantidade * estoque[i].preco;
    }
    printf("Valor total do estoque: %.2f\n\n", total);
}

void excluir_produto() {
    int repetir;
    do {
        if (total_produtos == 0) {
            printf("Estoque vazio.\n");
            return;
        }

        int id;
        printf("Digite o ID do produto que deseja excluir: ");
        scanf("%d", &id);

        if (id < 1 || id > total_produtos) {
            printf("ID invalido.\n");
        } else {
            for (int i = id - 1; i < total_produtos - 1; i++) {
                estoque[i] = estoque[i + 1];
                estoque[i].id = i + 1;
            }
            total_produtos--;

            printf("\nProduto removido com sucesso!\n");
            printf("  [X] ITEM EXCLUIDO DO ESTOQUE\n");
        }

        printf("\n1. Voltar ao menu | 2. Repetir operacao: ");
        scanf("%d", &repetir);
    } while (repetir == 2);
}
void apagar_todos_os_produtos() {
    char confirmacao;
    printf("Tem certeza que deseja apagar todos os produtos do estoque? (s/n): ");
    scanf(" %c", &confirmacao);

    if (confirmacao == 's' || confirmacao == 'S') {
        total_produtos = 0;

        FILE *arquivo = fopen("estoque.csv", "w"); // Alterado para .csv
        if (arquivo != NULL) {
            fclose(arquivo);
            printf("Todos os produtos foram apagados com sucesso!\n\n");
        } else {
            printf("Erro ao limpar o arquivo de estoque (estoque.csv).\n\n"); // Mensagem atualizada
        }
    } else {
        printf("Operação cancelada.\n\n");
    }
}


void salvar_estoque_em_arquivo() {
    FILE *arquivo = fopen("estoque.csv", "w");
    if (arquivo == NULL) {
        printf("Erro ao abrir arquivo para salvar estoque.\n");
        return;
    }
    fprintf(arquivo, "ID,Nome,Quantidade,Preco\n");
    for (int i = 0; i < total_produtos; i++) {
        fprintf(arquivo, "%d,%s,%d,%.2f\n", 
                estoque[i].id, 
                estoque[i].nome, 
                estoque[i].quantidade, 
                estoque[i].preco);
    }
    fclose(arquivo);
    printf("Estoque salvo com sucesso em estoque.csv.\n");
}


void carregar_estoque_do_arquivo() {
    FILE *arquivo = fopen("estoque.csv", "r");
    if (arquivo == NULL) {
        printf("Arquivo de estoque nao encontrado (estoque.csv). Estoque vazio.\n");
        return;
    }

    char linha[200];
    total_produtos = 0;

    fgets(linha, sizeof(linha), arquivo);

    while (fgets(linha, sizeof(linha), arquivo) != NULL) {
        if (total_produtos == capacidade) {
            capacidade = (capacidade == 0) ? 1 : capacidade * 2;
            struct Produto *temp = realloc(estoque, capacidade * sizeof(struct Produto));
            if (temp == NULL) {
                printf("Erro ao alocar memória ao carregar arquivo.\n");
                fclose(arquivo);
                return;
            }
            estoque = temp;
        }
        
        sscanf(linha, "%d,%49[^,],%d,%f", 
               &estoque[total_produtos].id, 
               estoque[total_produtos].nome, 
               &estoque[total_produtos].quantidade, 
               &estoque[total_produtos].preco);
        total_produtos++;
    }

    fclose(arquivo);
    printf("Estoque carregado com sucesso de estoque.csv.\n");
}


void ordenar_produtos(struct Produto **estoque, int total_produtos) {
    if (total_produtos == 0) {
        printf("Estoque vazio.\n");
        return;
    }

    int criterio;
    printf("\nOrdenar por:\n");
    printf("1. Nome\n");
    printf("2. Quantidade\n");
    printf("3. Preco\n");
    printf("Escolha uma opcao: ");
    scanf("%d", &criterio);

    for (int i = 0; i < total_produtos - 1; i++) {
        for (int j = i + 1; j < total_produtos; j++) {
            int trocar = 0;

            if (criterio == 1 && strcmp(estoque[i]->nome, estoque[j]->nome) > 0) {
                trocar = 1;
            } else if (criterio == 2 && estoque[i]->quantidade > estoque[j]->quantidade) {
                trocar = 1;
            } else if (criterio == 3 && estoque[i]->preco > estoque[j]->preco) {
                trocar = 1;
            }

            if (trocar) {
                struct Produto *temp = estoque[i];
                estoque[i] = estoque[j];
                estoque[j] = temp;
            }
        }
    }

    for (int i = 0; i < total_produtos; i++) {
        estoque[i]->id = i + 1;
    }

    printf("Produtos ordenados com sucesso!\n\n");
    listar_produtos(estoque, total_produtos);
}
void exportar_relatorio_csv() {
    FILE *arquivo = fopen("relatorio_estoque.csv", "w");
    if (arquivo == NULL) {
        printf("Erro ao criar o arquivo de relatorio.\n");
        return;
    }

    fprintf(arquivo, "ID,Nome,Quantidade,Preco\n"); 

    for (int i = 0; i < total_produtos; i++) {
        fprintf(arquivo, "%d,%s,%d,%.2f\n",
                estoque[i].id,
                estoque[i].nome,
                estoque[i].quantidade,
                estoque[i].preco);
    }

    fclose(arquivo);
    printf("Relatorio exportado com sucesso para 'relatorio_estoque.csv'.\n\n");
}



void mostrar_menu() {
    printf("==============================================\n");
    printf("|  OPCAO  |              ACAO                |\n");
    printf("==============================================\n");
    printf("|   1     | Adicionar produto                |\n");
    printf("|   2     | Listar produtos                  |\n");
    printf("|   3     | Atualizar quantidade             |\n");
    printf("|   4     | Buscar produto                   |\n");
    printf("|   5     | Valor total do estoque           |\n");
    printf("|   6     | Excluir produto                  |\n");
    printf("|   7     | Apagar todos os produtos         |\n");
    printf("|   8     | Ordenar produtos                 |\n");
    printf("|   9     | Exportar relatorio (.csv)        |\n");
    printf("|  10     | Encerrar programa                |\n");
    printf("==============================================\n");
    printf("Escolha uma opcao: ");
}


int main() {
    int opcao;

    do {
        cabecalho_menu();
        mostrar_menu();
        scanf("%d", &opcao);

        switch (opcao) {
            case 1: adicionar_produto(); break;
            case 2: listar_produtos(&estoque, total_produtos); break;
            case 3: atualizar_quantidade(); break;
            case 4: buscar_produto(); break;
            case 5: valor_total_estoque(); break;
            case 6: excluir_produto(); break;
            case 7: apagar_todos_os_produtos(); break;
            case 8: ordenar_produtos(&estoque, total_produtos); break;
            case 9: exportar_relatorio_csv(); break;
            case 10:
                salvar_estoque_em_arquivo(); 
                encerrar_programa(); 
                break;
            default: printf("Opcao invalida.\n");
        }

    } while (opcao != 10);
         
    free(estoque);

    return 0;
}
